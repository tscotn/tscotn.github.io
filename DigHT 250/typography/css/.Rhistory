pred <- names(super[2])
pred
ggplot(data=super, mapping=aes(x=!!pred, y=Rating)) +
geom_point() +
theme(aspect.ratio=1)
pred <- sym(names(super[2]))
pred
ggplot(data=super, mapping=aes(x=!!pred, y=Rating)) +
geom_point() +
theme(aspect.ratio=1)
ggplot(data=super, mapping=aes(x=pred, y=Rating)) +
geom_point() +
theme(aspect.ratio=1)
ggplot(data=super, mapping=aes(x=!!sym(names(super[2])), y=Rating)) +
geom_point() +
theme(aspect.ratio=1)
for (predictor in predictors) {
predictor = sym(predictor)
ggplot(data=super, mapping=aes(x=!!predictor, y=Rating)) +
geom_point() +
theme(aspect.ratio=1)
}
for (predictor in predictors) {
predictor = sym(predictor)
print(ggplot(data=super, mapping=aes(x=!!predictor, y=Rating)) +
geom_point() +
theme(aspect.ratio=1))
}
for (predictor in predictors) {
plot <- ggplot(data=super, mapping=aes(x=!!sym(predictor), y=Rating)) +
scale_x_continuous
geom_point() +
theme(aspect.ratio=1)
print(plot)
}
plot <- ggplot(data=super, mapping=aes(x=!!sym(predictor), y=Rating)) +
scale_x_continuous(limits=c(0,90)) +
scale_y_continuous(limits=c(0,90)) +
geom_point() +
theme(aspect.ratio=1)
for (predictor in predictors) {
plot <- ggplot(data=super, mapping=aes(x=!!sym(predictor), y=Rating)) +
scale_x_continuous(limits=c(0,90)) +
scale_y_continuous(limits=c(0,90)) +
geom_point() +
theme(aspect.ratio=1)
print(plot)
}
for (predictor in predictors) {
plot <- ggplot(data=super, mapping=aes(x=!!sym(predictor), y=Rating)) +
#scale_x_continuous(limits=c(30,90)) +
scale_y_continuous(limits=c(30,90)) +
geom_point() +
theme(aspect.ratio=1)
print(plot)
}
for (predictor in predictors) {
plot <- ggplot(data=super, mapping=aes(x=!!sym(predictor), y=Rating)) +
scale_x_continuous(limits=c(40,90)) +
scale_y_continuous(limits=c(40,90)) +
geom_point() +
theme(aspect.ratio=1)
print(plot)
}
for (predictor in predictors) {
plot <- ggplot(data=super, mapping=aes(x=!!sym(predictor), y=Rating)) +
scale_x_continuous(limits=c(40,90),
breaks=seq(40, 90, by=10)) +
scale_y_continuous(limits=c(40,90),
breaks=seq(40, 90, by=10)) +
geom_point() +
theme(aspect.ratio=1)
print(plot)
}
super <- read.csv("/Users/scot/Desktop/Supervisor.txt", sep=" ")
predictors <- names(super)[-1]
(predictors <- names(super)[-1])
for (predictor in predictors) {
plot <- ggplot(data=super, mapping=aes(x=!!sym(predictor), y=Rating)) +
scale_x_continuous(limits=c(40,90),
breaks=seq(40, 90, by=10)) +
scale_y_continuous(limits=c(40,90),
breaks=seq(40, 90, by=10)) +
geom_point() +
theme(aspect.ratio=1)
print(plot)
}
library(car)  # needed for added-variable plots and dfbetas and dffits
# load packages here
library(tidyverse)
library(ggfortify)  # plot lm objects using ggplot instead of base R
library(car)  # needed for added-variable plots and dfbetas and dffits
library(corrplot)  # colored correlation matrix
super <- read.csv("/Users/scot/Desktop/Supervisor.txt", sep=" ")
head(super)
(predictors <- names(super)[-1])
super.plot.matrix <- plot(super, pch=19)
round(cor(super), digits=3)
corrplot(cor(super), type="upper")
super.lm <- lm(Rating ~ ., data=super)
summary(super.lm)
super$residuals <- super.lm$residuals
super$fitted.values <- super.lm$fitted.values
autoplot(super.lm, which = 1, ncol = 1, nrow = 1) + theme(aspect.ratio=1)
for (predictor in predictors) {
plot <- ggplot(data=super, mapping=aes(x=!!sym(predictor), y=Rating)) +
scale_x_continuous(limits=c(40,90),
breaks=seq(40, 90, by=10)) +
scale_y_continuous(limits=c(40,90),
breaks=seq(40, 90, by=10)) +
geom_point() +
theme(aspect.ratio=1)
print(plot)
}
for (predictor in predictors) {
plot <- ggplot(data=super, mapping=aes(x=!!sym(predictor), y=Rating)) +
#scale_x_continuous(limits=c(40,90),
#                   breaks=seq(40, 90, by=10)) +
#scale_y_continuous(limits=c(40,90),
#                   breaks=seq(40, 90, by=10)) +
geom_point() +
theme(aspect.ratio=1)
print(plot)
}
round(9)
round(9, digits=0)
round(9, digits=-1)
round(9, digits=-2)
round(9, digits=-1)
round(max(super$rating), digits=-1)
max(super$rating)
max(super$Rating)
round(max(super$Rating), digits=-1)
floor(min(super$Rating), digits=-1)
round(min(super$Rating), digits=-1)
round(max(super$Rating), digits=-1)
trunc(10)
trunc(101)
trunc(101.4)
round(86)
round(86, digits=-1)
floor(86)
floor(86/10)
floor(86/10)*10
floor(min(super$Rating)/10)*10
floor(min(super$Rating))*10
floor(min(super$Rating))
min(super$Rating)
floor(min(super$Rating)*10)/10
super$Complaints
predictors[1]
sym(predictors[1])
!!sym(predictors[1])
super$!!sym(predictors[1])
super$sym(predictors[1])
super[sym(predictors[1])]
super[!!sym(predictors[1])]
super[predictors[1]]
for (predictor in predictors) {
x_lower_limit <- floor(min(super[predictor)/10)*10
for (predictor in predictors) {
x_lower_limit <- floor(min(super[predictor])/10)*10
x_upper_limit <- round(max(super[predictor]), digits=-1)
plot <- ggplot(data=super, mapping=aes(x=!!sym(predictor), y=Rating)) +
scale_x_continuous(limits=c(x_lower_limit, x_upper_limit),
breaks=seq(x_lower_limit, x_upper_limit, by=10)) +
scale_y_continuous(limits=c(y_lower_limit, y_upper_limit),
breaks=seq(y_lower_limit, y_upper_limit), by=10)) +
for (predictor in predictors) {
x_lower_limit <- floor(min(super[predictor])/10)*10
x_upper_limit <- round(max(super[predictor]), digits=-1)
plot <- ggplot(data=super, mapping=aes(x=!!sym(predictor), y=Rating)) +
scale_x_continuous(limits=c(x_lower_limit, x_upper_limit),
breaks=seq(x_lower_limit, x_upper_limit, by=10)) +
scale_y_continuous(limits=c(y_lower_limit, y_upper_limit),
breaks=seq(y_lower_limit, y_upper_limit, by=10)) +
geom_point() +
theme(aspect.ratio=1)
print(plot)
}
#scale:
y_lower_limit <- floor(min(super$Rating)*10)/10
y_upper_limit <- round(max(super$Rating), digits=-1)
for (predictor in predictors) {
x_lower_limit <- floor(min(super[predictor])/10)*10
x_upper_limit <- round(max(super[predictor]), digits=-1)
plot <- ggplot(data=super, mapping=aes(x=!!sym(predictor), y=Rating)) +
scale_x_continuous(limits=c(x_lower_limit, x_upper_limit),
breaks=seq(x_lower_limit, x_upper_limit, by=10)) +
scale_y_continuous(limits=c(y_lower_limit, y_upper_limit),
breaks=seq(y_lower_limit, y_upper_limit, by=10)) +
geom_point() +
theme(aspect.ratio=1)
print(plot)
}
y_upper_limit <- round(max(super$Rating), digits=-1)
y_upper_limit
max(super$Rating)
round(max(super$Rating))
#scale:
y_lower_limit <- floor(min(super$Rating)/10)*10
y_lower_limit
min(super$Rating)
#scale:
y_lower_limit <- floor(min(super$Rating)/10)*10
y_upper_limit <- ceiling(max(super$Rating)/10)*10
for (predictor in predictors) {
x_lower_limit <- floor(min(super[predictor])/10)*10
x_upper_limit <- round(max(super[predictor]), digits=-1)
plot <- ggplot(data=super, mapping=aes(x=!!sym(predictor), y=Rating)) +
scale_x_continuous(limits=c(x_lower_limit, x_upper_limit),
breaks=seq(x_lower_limit, x_upper_limit, by=10)) +
scale_y_continuous(limits=c(y_lower_limit, y_upper_limit),
breaks=seq(y_lower_limit, y_upper_limit, by=10)) +
geom_point() +
theme(aspect.ratio=1)
print(plot)
}
for (predictor in predictors) {
x_lower_limit <- floor(min(super[predictor])/10)*10
x_upper_limit <- round(max(super[predictor]), digits=-1)
plot <- ggplot(data=super, mapping=aes(x=!!sym(predictor), y=Rating)) +
#scale_x_continuous(limits=c(x_lower_limit, x_upper_limit),
#                   breaks=seq(x_lower_limit, x_upper_limit, by=10)) +
#scale_y_continuous(limits=c(y_lower_limit, y_upper_limit),
#                   breaks=seq(y_lower_limit, y_upper_limit, by=10)) +
geom_point() +
theme(aspect.ratio=1)
print(plot)
}
for (predictor in predictors) {
x_lower_limit <- floor(min(super[predictor])/10)*10
x_upper_limit <- ceiling(max(super[predictor])/10)*10
plot <- ggplot(data=super, mapping=aes(x=!!sym(predictor), y=Rating)) +
#scale_x_continuous(limits=c(x_lower_limit, x_upper_limit),
#                   breaks=seq(x_lower_limit, x_upper_limit, by=10)) +
#scale_y_continuous(limits=c(y_lower_limit, y_upper_limit),
#                   breaks=seq(y_lower_limit, y_upper_limit, by=10)) +
geom_point() +
theme(aspect.ratio=1)
print(plot)
}
for (predictor in predictors) {
x_lower_limit <- floor(min(super[predictor])/10)*10
x_upper_limit <- ceiling(max(super[predictor])/10)*10
plot <- ggplot(data=super, mapping=aes(x=!!sym(predictor), y=Rating)) +
scale_x_continuous(limits=c(x_lower_limit, x_upper_limit),
breaks=seq(x_lower_limit, x_upper_limit, by=10)) +
scale_y_continuous(limits=c(y_lower_limit, y_upper_limit),
breaks=seq(y_lower_limit, y_upper_limit, by=10)) +
geom_point() +
theme(aspect.ratio=1)
print(plot)
}
for (predictor in predictors) {
x_lower_limit <- floor(min(super[predictor])/10)*10
x_upper_limit <- ceiling(max(super[predictor])/10)*10
plot <- ggplot(data=super, mapping=aes(x=!!sym(predictor), y=residuals)) +
#scale_x_continuous(limits=c(x_lower_limit, x_upper_limit),
#                   breaks=seq(x_lower_limit, x_upper_limit, by=10)) +
#scale_y_continuous(limits=c(y_lower_limit, y_upper_limit),
#                   breaks=seq(y_lower_limit, y_upper_limit, by=10)) +
geom_point() +
theme(aspect.ratio=1)
print(plot)
}
# load packages here
library(tidyverse)
library(ggfortify)  # plot lm objects using ggplot instead of base R
library(car)  # Brown-Forsythe Test and Box-Cox transformation
# set common size for plotting
sz <- 16
# Note: this code is all from Module 1
cars <- read.csv("MPGData.txt", header = TRUE, sep = " ")
head(cars)
summary(cars)
cars.base.plot <- ggplot(data = cars, mapping = aes(x = Weight, y = MPG)) +
geom_point() +
theme_bw() +
scale_x_continuous(limits = c(1500, 3500)) +
scale_y_continuous(limits = c(10, 50)) +
theme(aspect.ratio = 1)
cars.base.plot + geom_smooth(method = "lm", se = FALSE)
cars.lm <- lm(MPG ~ Weight, data = cars)
summary(cars.lm)
cars$residuals <- cars.lm$residuals
cars$fittedMPG <- cars.lm$fitted.values
avPlots(super.lm)
# make sure this only contains predictors
super.dfbetas <- as.data.frame(dfbetas(super.lm))
super.dfbetas$obs <- 1:nrow(super)
for (predictor in predictors) {
# aes(x=!!sym(predictor), y=residuals)) +
#plot:
plot <- ggplot(data = super.dfbetas) +
geom_point(mapping = aes(x = obs, y = abs(!!sym(predictor)))) +
ylab("Absolute Value of DFBETAS for X") +
xlab("Observation Number") +
geom_hline(mapping = aes(yintercept = 1),
color = "red", linetype = "dashed") +  # for n <= 30
geom_hline(mapping = aes(yintercept = 2 / sqrt(length(obs))),
color = "red", linetype = "dashed") +  # for n > 30
theme_bw() +
theme(aspect.ratio = 1, plot.title = element_blank())
print(plot)
}
for (predictor in predictors) {
# aes(x=!!sym(predictor), y=residuals)) +
#plot:
plot <- ggplot(data = super.dfbetas) +
geom_point(mapping = aes(x = obs, y = abs(!!sym(predictor)))) +
ylab(paste("Absolute Value of DFBETAS for ", predictor, sep='')) +
xlab("Observation Number") +
geom_hline(mapping = aes(yintercept = 1),
color = "red", linetype = "dashed") +  # for n <= 30
geom_hline(mapping = aes(yintercept = 2 / sqrt(length(obs))),
color = "red", linetype = "dashed") +  # for n > 30
theme_bw() +
theme(aspect.ratio = 1, plot.title = element_blank())
print(plot)
}
vif(super.lm)
sym("money")
"money"
sym("money")
!!sym("money")
sym("money").extreme = 15
sym("money").extreme <- 15
!!sym("money").extreme <- 15
!!sym("money").extreme <- 15
!sym("money").extreme <- 15
for (predictor in predictors) {
# aes(x=!!sym(predictor), y=residuals)) +
#plot:
plot <- ggplot(data = super.dfbetas) +
geom_point(mapping = aes(x = obs, y = abs(!!sym(predictor)))) +
ylab(paste("Absolute Value of DFBETAS for ", predictor, sep='')) +
xlab("Observation Number") +
geom_hline(mapping = aes(yintercept = 1),
color = "red", linetype = "dashed") +  # for n <= 30
geom_hline(mapping = aes(yintercept = 2 / sqrt(length(obs))),
color = "red", linetype = "dashed") +  # for n > 30
theme_bw() +
theme(aspect.ratio = 1, plot.title = element_blank())
print(plot)
super.dfbetas[abs(super.dfbetas[predictor]) > 2 / sqrt(length(super.dfbetas$obs)), ]
}
for (predictor in predictors) {
# aes(x=!!sym(predictor), y=residuals)) +
#plot:
plot <- ggplot(data = super.dfbetas) +
geom_point(mapping = aes(x = obs, y = abs(!!sym(predictor)))) +
ylab(paste("Absolute Value of DFBETAS for ", predictor, sep='')) +
xlab("Observation Number") +
geom_hline(mapping = aes(yintercept = 1),
color = "red", linetype = "dashed") +  # for n <= 30
geom_hline(mapping = aes(yintercept = 2 / sqrt(length(obs))),
color = "red", linetype = "dashed") +  # for n > 30
theme_bw() +
theme(aspect.ratio = 1, plot.title = element_blank())
print(plot)
print(super.dfbetas[abs(super.dfbetas[predictor]) > 2 / sqrt(length(super.dfbetas$obs)), ])
}
for (predictor in predictors) {
# aes(x=!!sym(predictor), y=residuals)) +
#plot:
plot <- ggplot(data = super.dfbetas) +
geom_point(mapping = aes(x = obs, y = abs(!!sym(predictor)))) +
ylab(paste("Absolute Value of DFBETAS for ", predictor, sep='')) +
xlab("Observation Number") +
geom_hline(mapping = aes(yintercept = 1),
color = "red", linetype = "dashed") +  # for n <= 30
geom_hline(mapping = aes(yintercept = 2 / sqrt(length(obs))),
color = "red", linetype = "dashed") +  # for n > 30
theme_bw() +
theme(aspect.ratio = 1, plot.title = element_blank())
print(plot)
print(super.dfbetas[abs(super.dfbetas[predictor]) > 2 / sqrt(length(super.dfbetas$obs)),][order(x.extreme.dfbetas[predictor]),])
}
for (predictor in predictors) {
# aes(x=!!sym(predictor), y=residuals)) +
#plot:
plot <- ggplot(data = super.dfbetas) +
geom_point(mapping = aes(x = obs, y = abs(!!sym(predictor)))) +
ylab(paste("Absolute Value of DFBETAS for ", predictor, sep='')) +
xlab("Observation Number") +
geom_hline(mapping = aes(yintercept = 1),
color = "red", linetype = "dashed") +  # for n <= 30
geom_hline(mapping = aes(yintercept = 2 / sqrt(length(obs))),
color = "red", linetype = "dashed") +  # for n > 30
theme_bw() +
theme(aspect.ratio = 1, plot.title = element_blank())
print(plot)
print(super.dfbetas[abs(super.dfbetas[predictor]) > 2 / sqrt(length(super.dfbetas$obs)),])
}
for (predictor in predictors) {
# aes(x=!!sym(predictor), y=residuals)) +
#plot:
plot <- ggplot(data = super.dfbetas) +
geom_point(mapping = aes(x = obs, y = abs(!!sym(predictor)))) +
ylab(paste("Absolute Value of DFBETAS for ", predictor, sep='')) +
xlab("Observation Number") +
geom_hline(mapping = aes(yintercept = 1),
color = "red", linetype = "dashed") +  # for n <= 30
geom_hline(mapping = aes(yintercept = 2 / sqrt(length(obs))),
color = "red", linetype = "dashed") +  # for n > 30
theme_bw() +
theme(aspect.ratio = 1, plot.title = element_blank())
print(plot)
print(paste("Cook's Distance for ", predictor, ":", sep = ''))
print(super.dfbetas[abs(super.dfbetas[predictor]) > 2 / sqrt(length(super.dfbetas$obs)),])
}
# make sure this only contains predictors
super.dfbetas <- as.data.frame(dfbetas(super.lm))
super.dfbetas$obs <- 1:nrow(super)
extreme <- NULL
for (predictor in predictors) {
# aes(x=!!sym(predictor), y=residuals)) +
#plot:
plot <- ggplot(data = super.dfbetas) +
geom_point(mapping = aes(x = obs, y = abs(!!sym(predictor)))) +
ylab(paste("Absolute Value of DFBETAS for ", predictor, sep='')) +
xlab("Observation Number") +
geom_hline(mapping = aes(yintercept = 1),
color = "red", linetype = "dashed") +  # for n <= 30
geom_hline(mapping = aes(yintercept = 2 / sqrt(length(obs))),
color = "red", linetype = "dashed") +  # for n > 30
theme_bw() +
theme(aspect.ratio = 1, plot.title = element_blank())
print(plot)
print(paste("Cook's Distance for ", predictor, ":", sep = ''))
print(super.dfbetas[abs(super.dfbetas[predictor]) > 2 / sqrt(length(super.dfbetas$obs)),])
}
for (predictor in predictors) {
# make sure this only contains predictors
super.dfbetas <- as.data.frame(dfbetas(super.lm))
super.dfbetas$obs <- 1:nrow(super)
extreme <- NULL
for (predictor in predictors) {
# aes(x=!!sym(predictor), y=residuals)) +
#plot:
plot <- ggplot(data = super.dfbetas) +
geom_point(mapping = aes(x = obs, y = abs(!!sym(predictor)))) +
ylab(paste("Absolute Value of DFBETAS for ", predictor, sep='')) +
xlab("Observation Number") +
geom_hline(mapping = aes(yintercept = 1),
color = "red", linetype = "dashed") +  # for n <= 30
geom_hline(mapping = aes(yintercept = 2 / sqrt(length(obs))),
color = "red", linetype = "dashed") +  # for n > 30
theme_bw() +
theme(aspect.ratio = 1, plot.title = element_blank())
print(plot)
print(super.dfbetas[abs(super.dfbetas[predictor]) > 2 / sqrt(length(super.dfbetas$obs)),[predictor, 'obs'])
# make sure this only contains predictors
super.dfbetas <- as.data.frame(dfbetas(super.lm))
super.dfbetas$obs <- 1:nrow(super)
extreme <- NULL
for (predictor in predictors) {
# aes(x=!!sym(predictor), y=residuals)) +
#plot:
plot <- ggplot(data = super.dfbetas) +
geom_point(mapping = aes(x = obs, y = abs(!!sym(predictor)))) +
ylab(paste("Absolute Value of DFBETAS for ", predictor, sep='')) +
xlab("Observation Number") +
geom_hline(mapping = aes(yintercept = 1),
color = "red", linetype = "dashed") +  # for n <= 30
geom_hline(mapping = aes(yintercept = 2 / sqrt(length(obs))),
color = "red", linetype = "dashed") +  # for n > 30
theme_bw() +
theme(aspect.ratio = 1, plot.title = element_blank())
print(plot)
print(super.dfbetas[abs(super.dfbetas[predictor]) > 2 / sqrt(length(super.dfbetas$obs)),][predictor, 'obs'])
}
# make sure this only contains predictors
super.dfbetas <- as.data.frame(dfbetas(super.lm))
super.dfbetas$obs <- 1:nrow(super)
extreme <- NULL
for (predictor in predictors) {
# aes(x=!!sym(predictor), y=residuals)) +
#plot:
plot <- ggplot(data = super.dfbetas) +
geom_point(mapping = aes(x = obs, y = abs(!!sym(predictor)))) +
ylab(paste("Absolute Value of DFBETAS for ", predictor, sep='')) +
xlab("Observation Number") +
geom_hline(mapping = aes(yintercept = 1),
color = "red", linetype = "dashed") +  # for n <= 30
geom_hline(mapping = aes(yintercept = 2 / sqrt(length(obs))),
color = "red", linetype = "dashed") +  # for n > 30
theme_bw() +
theme(aspect.ratio = 1, plot.title = element_blank())
print(plot)
print(super.dfbetas[abs(super.dfbetas[predictor]) > 2 / sqrt(length(super.dfbetas$obs)), c(predictor, 'obs'))
# make sure this only contains predictors
super.dfbetas <- as.data.frame(dfbetas(super.lm))
super.dfbetas$obs <- 1:nrow(super)
extreme <- NULL
for (predictor in predictors) {
# aes(x=!!sym(predictor), y=residuals)) +
#plot:
plot <- ggplot(data = super.dfbetas) +
geom_point(mapping = aes(x = obs, y = abs(!!sym(predictor)))) +
ylab(paste("Absolute Value of DFBETAS for ", predictor, sep='')) +
xlab("Observation Number") +
geom_hline(mapping = aes(yintercept = 1),
color = "red", linetype = "dashed") +  # for n <= 30
geom_hline(mapping = aes(yintercept = 2 / sqrt(length(obs))),
color = "red", linetype = "dashed") +  # for n > 30
theme_bw() +
theme(aspect.ratio = 1, plot.title = element_blank())
print(plot)
print(super.dfbetas[abs(super.dfbetas[predictor]) > 2 / sqrt(length(super.dfbetas$obs)), c(predictor, 'obs')])
}
